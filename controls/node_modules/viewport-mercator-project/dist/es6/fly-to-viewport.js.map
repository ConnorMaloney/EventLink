{"version":3,"sources":["../../src/fly-to-viewport.js"],"names":["lerp","scaleToZoom","zoomToScale","lngLatToWorld","worldToLngLat","vec2","EPSILON","VIEWPORT_TRANSITION_PROPS","flyToViewport","startProps","endProps","t","viewport","rho","startZoom","zoom","startCenter","longitude","latitude","startScale","endZoom","endCenter","scale","startCenterXY","endCenterXY","uDelta","sub","w0","Math","max","width","height","w1","u1","length","abs","key","startValue","endValue","rho2","b0","b1","r0","log","sqrt","r1","S","s","w","cosh","u","tanh","sinh","scaleIncrement","newZoom","newCenterWorld","add","newCenter"],"mappings":"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","sourcesContent":["import {lerp} from './math-utils';\nimport {\n  scaleToZoom,\n  zoomToScale,\n  lngLatToWorld,\n  worldToLngLat\n} from './web-mercator-utils';\nimport * as vec2 from 'gl-matrix/vec2';\n\nconst EPSILON = 0.01;\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom'];\n\n/**\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n*/\n/* eslint-disable max-statements */\nexport default function flyToViewport(startProps, endProps, t) {\n  // Equations from above paper are referred where needed.\n\n  const viewport = {};\n\n  // TODO: add this as an option for applications.\n  const rho = 1.414;\n\n  const startZoom = startProps.zoom;\n  const startCenter = [startProps.longitude, startProps.latitude];\n  const startScale = zoomToScale(startZoom);\n  const endZoom = endProps.zoom;\n  const endCenter = [endProps.longitude, endProps.latitude];\n  const scale = zoomToScale(endZoom - startZoom);\n\n  const startCenterXY = lngLatToWorld(startCenter, startScale);\n  const endCenterXY = lngLatToWorld(endCenter, startScale);\n  const uDelta = vec2.sub([], endCenterXY, startCenterXY);\n\n  const w0 = Math.max(startProps.width, startProps.height);\n  const w1 = w0 / scale;\n  const u1 = vec2.length(uDelta);\n  // u0 is treated as '0' in Eq (9).\n\n  // If change in center is too small, do linear interpolaiton.\n  if (Math.abs(u1) < EPSILON) {\n    for (const key of VIEWPORT_TRANSITION_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      viewport[key] = lerp(startValue, endValue, t);\n    }\n    return viewport;\n  }\n\n  // Implement Equation (9) from above algorithm.\n  const rho2 = rho * rho;\n  const b0 = (w1 * w1 - w0 * w0 + rho2 * rho2 * u1 * u1) / (2 * w0 * rho2 * u1);\n  const b1 = (w1 * w1 - w0 * w0 - rho2 * rho2 * u1 * u1) / (2 * w1 * rho2 * u1);\n  const r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0);\n  const r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);\n  const S = (r1 - r0) / rho;\n  const s = t * S;\n\n  const w = (Math.cosh(r0) / Math.cosh(r0 + rho * s));\n  const u = w0 * ((Math.cosh(r0) * Math.tanh(r0 + rho * s) - Math.sinh(r0)) / rho2) / u1;\n\n  const scaleIncrement = 1 / w; // Using w method for scaling.\n  const newZoom = startZoom + scaleToZoom(scaleIncrement);\n\n  const newCenterWorld = vec2.scale([], uDelta, u);\n  vec2.add(newCenterWorld, newCenterWorld, startCenterXY);\n  vec2.scale(newCenterWorld, newCenterWorld, scaleIncrement);\n\n  const newCenter = worldToLngLat(\n    newCenterWorld,\n    zoomToScale(newZoom));\n  viewport.longitude = newCenter[0];\n  viewport.latitude = newCenter[1];\n  viewport.zoom = newZoom;\n  return viewport;\n}\n/* eslint-enable max-statements */\n"],"file":"fly-to-viewport.js"}