{"version":3,"sources":["../../../src/utils/map-state.js"],"names":["WebMercatorViewport","normalizeViewportProps","TransitionInterpolator","clamp","assert","MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","MapState","constructor","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_viewportProps","_applyConstraints","_interactiveState","getViewportProps","getInteractiveState","panStart","pos","_getUpdatedMapState","_unproject","pan","startPos","_calculateNewLngLat","panEnd","rotateStart","rotate","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","rotateEnd","zoomStart","scale","_calculateNewZoom","zoomedViewport","Object","assign","getMapCenterByLngLatPosition","lngLat","zoomEnd","newProps","props","viewport","unproject","Math","log2"],"mappings":"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","sourcesContent":["// @flow\nimport WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport {TransitionInterpolator} from './transition';\nimport {clamp} from './math-utils';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\ntype ViewportProps = {\n  width: number,\n  height: number,\n  latitude: number,\n  longitude: number,\n  zoom: number,\n  bearing: number,\n  pitch: number,\n  altitude: number,\n  maxZoom: number,\n  minZoom: number,\n  maxPitch: number,\n  minPitch: number,\n  transitionDuration: number,\n  transitionEasing: number => number,\n  transitionInterpolator: TransitionInterpolator,\n  transitionInterruption: number\n};\n\ntype InteractiveState = {\n  startPanLngLat?: Array<number>,\n  startZoomLngLat?: Array<number>,\n  startBearing?: number,\n  startPitch?: number,\n  startZoom?: number\n};\n\nexport type MapStateProps = ViewportProps & InteractiveState & {\n  altitude?: number,\n  maxZoom?: number,\n  minZoom?: number,\n  maxPitch?: number,\n  minPitch?: number,\n};\n\nexport default class MapState {\n\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  }: MapStateProps) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  _viewportProps: ViewportProps;\n  _interactiveState: InteractiveState;\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos} : {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos} : {pos: Array<number>, startPos?: Array<number>}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos} : {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0} : {deltaScaleX?: number, deltaScaleY?: number}) {\n\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing: startBearing || 0,\n      startPitch: startPitch || 0\n    });\n\n    return this._getUpdatedMapState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos} : {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale} : {pos: Array<number>, startPos?: Array<number>, scale: number}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(startZoomLngLat, '`startZoomLngLat` prop is required ' +\n      'for zoom behavior to calculate where to position the map.');\n\n    const zoom = this._calculateNewZoom({scale, startZoom: startZoom || 0});\n\n    const zoomedViewport = new WebMercatorViewport(\n      Object.assign({}, this._viewportProps, {zoom})\n    );\n    // $FlowFixMe\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps: any): MapState {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props: ViewportProps): ViewportProps {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos: ?Array<number>): ?Array<number> {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}: {\n    startPanLngLat: Array<number>,\n    pos: Array<number>\n  }): Array<number> {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}: {scale: number, startZoom: number}): number {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch} : {\n    deltaScaleX: number,\n    deltaScaleY: number,\n    startBearing: number,\n    startPitch: number\n  }) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n}\n"],"file":"map-state.js"}