{"version":3,"sources":["../../../src/utils/transition-manager.js"],"names":["assert","TransitionInterpolator","LinearInterpolator","MapState","noop","cropEasingFunction","easing","x0","y0","t","TRANSITION_EVENTS","BREAK","SNAP_TO_END","IGNORE","UPDATE","DEFAULT_PROPS","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","onTransitionStart","onTransitionInterrupt","onTransitionEnd","onViewportChange","onStateChange","TransitionManager","constructor","props","_animationFrame","requestAnimationFrame","_onTransitionFrame","_updateViewport","getViewportInTransition","state","propsInTransition","processViewportChange","nextProps","currentProps","_shouldIgnoreViewportChange","_isTransitionEnabled","startProps","Object","assign","endProps","_isTransitionInProgress","interruption","currentTime","Date","now","startTime","duration","_triggerTransition","_endTransition","Boolean","_isUpdateDueToCurrentTransition","interpolator","arePropsEqual","cancelAnimationFrame","initialProps","initializeProps","interactionState","inTransition","isZooming","zoom","isPanning","longitude","latitude","isRotating","bearing","pitch","start","end","animation","shouldEnd","viewport","interpolateProps","mapState","getViewportProps"],"mappings":"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","sourcesContent":["// @flow\n/* global requestAnimationFrame, cancelAnimationFrame */\nimport assert from './assert';\nimport {TransitionInterpolator, LinearInterpolator} from './transition';\nimport MapState from './map-state';\n\nimport type {MapStateProps} from './map-state';\n\nconst noop = () => {};\n\n// crops the old easing function from x0 to 1 where x0 is the interruption point\n// returns a new easing function with domain [0, 1] and range [0, 1]\nexport function cropEasingFunction(easing: number => number, x0: number): number => number {\n  const y0 = easing(x0);\n  return (t: number) => 1 / (1 - y0) * (easing(t * (1 - x0) + x0) - y0);\n}\n\nexport const TRANSITION_EVENTS = {\n  BREAK: 1,\n  SNAP_TO_END: 2,\n  IGNORE: 3,\n  UPDATE: 4\n};\n\nconst DEFAULT_PROPS = {\n  transitionDuration: 0,\n  transitionEasing: (t: number) => t,\n  transitionInterpolator: new LinearInterpolator(),\n  transitionInterruption: TRANSITION_EVENTS.BREAK,\n  onTransitionStart: noop,\n  onTransitionInterrupt: noop,\n  onTransitionEnd: noop,\n  onViewportChange: noop,\n  onStateChange: noop\n};\n\nexport type ViewportProps = MapStateProps & {\n  onTransitionStart: Function,\n  onTransitionInterrupt: Function,\n  onTransitionEnd: Function,\n  onViewportChange: Function,\n  onStateChange: Function\n};\n\ntype TransitionState = {\n  propsInTransition: any,\n  interactionState: any,\n  startProps: MapStateProps,\n  endProps: MapStateProps,\n\n  duration: number,\n  easing: number => number,\n  interpolator: TransitionInterpolator,\n  interruption: number,\n\n  startTime: number\n};\n\nexport default class TransitionManager {\n\n  static defaultProps = DEFAULT_PROPS;\n\n  constructor(props?: ViewportProps) {\n    if (props) {\n      this.props = props;\n    }\n  }\n\n  props: ViewportProps;\n  state: TransitionState;\n\n  _animationFrame: ?AnimationFrameID = null;\n\n  // Returns current transitioned viewport.\n  getViewportInTransition() {\n    return this._animationFrame ? this.state.propsInTransition : null;\n  }\n\n  // Process the viewport change, either ignore or trigger a new transiton.\n  // Return true if a new transition is triggered, false otherwise.\n  processViewportChange(nextProps: ViewportProps) {\n    const currentProps = this.props;\n    // Set this.props here as '_triggerTransition' calls '_updateViewport' that uses this.props.\n    this.props = nextProps;\n\n    // NOTE: Be cautious re-ordering statements in this function.\n    if (this._shouldIgnoreViewportChange(currentProps, nextProps)) {\n      return false;\n    }\n\n    if (this._isTransitionEnabled(nextProps)) {\n      const startProps = Object.assign({}, currentProps);\n      const endProps = Object.assign({}, nextProps);\n\n      if (this._isTransitionInProgress()) {\n        currentProps.onTransitionInterrupt();\n\n        if (this.state.interruption === TRANSITION_EVENTS.SNAP_TO_END) {\n          Object.assign(startProps, this.state.endProps);\n        } else {\n          Object.assign(startProps, this.state.propsInTransition);\n        }\n\n        if (this.state.interruption === TRANSITION_EVENTS.UPDATE) {\n          const currentTime = Date.now();\n          const x0 = (currentTime - this.state.startTime) / this.state.duration;\n          endProps.transitionDuration =\n          this.state.duration - (currentTime - this.state.startTime);\n          endProps.transitionEasing = cropEasingFunction(this.state.easing, x0);\n          endProps.transitionInterpolator = startProps.transitionInterpolator;\n        }\n      }\n      endProps.onTransitionStart();\n\n      this._triggerTransition(startProps, endProps);\n\n      return true;\n    }\n\n    if (this._isTransitionInProgress()) {\n      currentProps.onTransitionInterrupt();\n      this._endTransition();\n    }\n\n    return false;\n  }\n\n  // Helper methods\n\n  _isTransitionInProgress(): boolean {\n    return Boolean(this._animationFrame);\n  }\n\n  _isTransitionEnabled(props: ViewportProps): boolean {\n    return props.transitionDuration > 0 && Boolean(props.transitionInterpolator);\n  }\n\n  _isUpdateDueToCurrentTransition(props: ViewportProps): boolean {\n    if (this.state.propsInTransition) {\n      return this.state.interpolator.arePropsEqual(props, this.state.propsInTransition);\n    }\n    return false;\n  }\n\n  _shouldIgnoreViewportChange(currentProps: ViewportProps, nextProps: ViewportProps): boolean {\n    if (!currentProps) {\n      return true;\n    }\n    if (this._isTransitionInProgress()) {\n      // Ignore update if it is requested to be ignored\n      return this.state.interruption === TRANSITION_EVENTS.IGNORE ||\n        // Ignore update if it is due to current active transition.\n        this._isUpdateDueToCurrentTransition(nextProps);\n    }\n    if (this._isTransitionEnabled(nextProps)) {\n      // Ignore if none of the viewport props changed.\n      return nextProps.transitionInterpolator.arePropsEqual(currentProps, nextProps);\n    }\n\n    return true;\n  }\n\n  _triggerTransition(startProps: ViewportProps, endProps: ViewportProps) {\n    assert(this._isTransitionEnabled(endProps), 'Transition is not enabled');\n\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n    }\n\n    const initialProps = endProps.transitionInterpolator.initializeProps(\n      startProps,\n      endProps\n    );\n\n    const interactionState = {\n      inTransition: true,\n      isZooming: startProps.zoom !== endProps.zoom,\n      isPanning: startProps.longitude !== endProps.longitude ||\n        startProps.latitude !== endProps.latitude,\n      isRotating: startProps.bearing !== endProps.bearing ||\n        startProps.pitch !== endProps.pitch\n    };\n\n    this.state = {\n      // Save current transition props\n      duration: endProps.transitionDuration,\n      easing: endProps.transitionEasing,\n      interpolator: endProps.transitionInterpolator,\n      interruption: endProps.transitionInterruption,\n\n      startTime: Date.now(),\n      startProps: initialProps.start,\n      endProps: initialProps.end,\n      animation: null,\n      propsInTransition: {},\n      interactionState\n    };\n    this._onTransitionFrame();\n    this.props.onStateChange(interactionState);\n  }\n\n  _onTransitionFrame = () => {\n    // _updateViewport() may cancel the animation\n    this._animationFrame = requestAnimationFrame(this._onTransitionFrame);\n    this._updateViewport();\n  }\n\n  _endTransition() {\n    if (this._animationFrame) {\n      cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = null;\n    }\n    this.props.onStateChange({\n      inTransition: false,\n      isZooming: false,\n      isPanning: false,\n      isRotating: false\n    });\n  }\n\n  _updateViewport() {\n    // NOTE: Be cautious re-ordering statements in this function.\n    const currentTime = Date.now();\n    const {startTime, duration, easing, interpolator, startProps, endProps} = this.state;\n    let shouldEnd = false;\n    let t = (currentTime - startTime) / duration;\n    if (t >= 1) {\n      t = 1;\n      shouldEnd = true;\n    }\n    t = easing(t);\n\n    const viewport = interpolator.interpolateProps(startProps, endProps, t);\n    // Normalize viewport props\n    const mapState = new MapState(Object.assign({}, this.props, viewport));\n    this.state.propsInTransition = mapState.getViewportProps();\n\n    this.props.onViewportChange(\n      this.state.propsInTransition,\n      this.state.interactionState,\n      this.props\n    );\n\n    if (shouldEnd) {\n      this._endTransition();\n      this.props.onTransitionEnd();\n    }\n  }\n}\n"],"file":"transition-manager.js"}