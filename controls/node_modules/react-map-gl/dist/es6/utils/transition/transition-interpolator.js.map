{"version":3,"sources":["../../../../src/utils/transition/transition-interpolator.js"],"names":["equals","assert","TransitionInterpolator","arePropsEqual","currentProps","nextProps","key","propNames","initializeProps","startProps","endProps","start","end","interpolateProps","t"],"mappings":";AACA,SAAQA,MAAR,QAAqB,eAArB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,eAAe,MAAMC,sBAAN,CAA6B;AAAA;AAAA,uCAEf,EAFe;AAAA;;AAI1C;;;;;;AAMAC,EAAAA,aAAa,CAACC,YAAD,EAAoBC,SAApB,EAA6C;AACxD,SAAK,MAAMC,GAAX,IAAmB,KAAKC,SAAL,IAAkB,EAArC,EAA0C;AACxC,UAAI,CAACP,MAAM,CAACI,YAAY,CAACE,GAAD,CAAb,EAAoBD,SAAS,CAACC,GAAD,CAA7B,CAAX,EAAgD;AAC9C,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;AAED;;;;;;;;;AAOAE,EAAAA,eAAe,CAACC,UAAD,EAAkBC,QAAlB,EAGb;AACA,WAAO;AAACC,MAAAA,KAAK,EAAEF,UAAR;AAAoBG,MAAAA,GAAG,EAAEF;AAAzB,KAAP;AACD;AAED;;;;;;;;;AAOAG,EAAAA,gBAAgB,CAACJ,UAAD,EAAkBC,QAAlB,EAAiCI,CAAjC,EAAiD;AAC/Db,IAAAA,MAAM,CAAC,KAAD,EAAQ,qCAAR,CAAN;AACD;;AA1CyC","sourcesContent":["// @flow\nimport {equals} from '../math-utils';\nimport assert from '../assert';\n\nexport default class TransitionInterpolator {\n\n  propNames: Array<string> = [];\n\n  /**\n   * Checks if two sets of props need transition in between\n   * @param currentProps {object} - a list of viewport props\n   * @param nextProps {object} - a list of viewport props\n   * @returns {bool} - true if two props are equivalent\n   */\n  arePropsEqual(currentProps: any, nextProps: any): boolean {\n    for (const key of (this.propNames || [])) {\n      if (!equals(currentProps[key], nextProps[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Called before transition starts to validate/pre-process start and end props\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @returns {Object} {start, end} - start and end props to be passed\n   *   to `interpolateProps`\n   */\n  initializeProps(startProps: any, endProps: any): {\n    start: any,\n    end: any\n  } {\n    return {start: startProps, end: endProps};\n  }\n\n  /**\n   * Returns viewport props in transition\n   * @param startProps {object} - a list of starting viewport props\n   * @param endProps {object} - a list of target viewport props\n   * @param t {number} - a time factor between [0, 1]\n   * @returns {object} - a list of interpolated viewport props\n   */\n  interpolateProps(startProps: any, endProps: any, t: number): any {\n    assert(false, 'interpolateProps is not implemented');\n  }\n\n}\n"],"file":"transition-interpolator.js"}