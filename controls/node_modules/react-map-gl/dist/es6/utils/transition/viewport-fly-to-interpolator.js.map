{"version":3,"sources":["../../../../src/utils/transition/viewport-fly-to-interpolator.js"],"names":["assert","TransitionInterpolator","flyToViewport","isValid","getEndValueByShortestPath","lerp","VIEWPORT_TRANSITION_PROPS","REQUIRED_PROPS","LINEARLY_INTERPOLATED_PROPS","ViewportFlyToInterpolator","initializeProps","startProps","endProps","startViewportProps","endViewportProps","key","startValue","endValue","start","end","interpolateProps","t","viewport"],"mappings":";AACA,OAAOA,MAAP,MAAmB,WAAnB;AACA,OAAOC,sBAAP,MAAmC,2BAAnC;AAEA,SAAQC,aAAR,QAA4B,2BAA5B;AACA,SAAQC,OAAR,EAAiBC,yBAAjB,QAAiD,oBAAjD;AACA,SAAQC,IAAR,QAAmB,eAAnB;AAIA,MAAMC,yBAAyB,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,MAA1B,EAAkC,SAAlC,EAA6C,OAA7C,CAAlC;AACA,MAAMC,cAAc,GAAG,CAAC,UAAD,EAAa,WAAb,EAA0B,MAA1B,EAAkC,OAAlC,EAA2C,QAA3C,CAAvB;AACA,MAAMC,2BAA2B,GAAG,CAAC,SAAD,EAAY,OAAZ,CAApC;AAEA;;;;;;;;AAOA,eAAe,MAAMC,yBAAN,SAAwCR,sBAAxC,CAA+D;AAAA;AAAA;;AAAA,uCAEhEK,yBAFgE;AAAA;;AAI5EI,EAAAA,eAAe,CAACC,UAAD,EAA4BC,QAA5B,EAAqD;AAClE,UAAMC,kBAAkB,GAAG,EAA3B;AACA,UAAMC,gBAAgB,GAAG,EAAzB,CAFkE,CAIlE;;AACA,SAAK,MAAMC,GAAX,IAAkBR,cAAlB,EAAkC;AAChC,YAAMS,UAAU,GAAGL,UAAU,CAACI,GAAD,CAA7B;AACA,YAAME,QAAQ,GAAGL,QAAQ,CAACG,GAAD,CAAzB;AACAf,MAAAA,MAAM,CAACG,OAAO,CAACa,UAAD,CAAP,IAAuBb,OAAO,CAACc,QAAD,CAA/B,EAA4C,GAAEF,GAAI,kCAAlD,CAAN;AACAF,MAAAA,kBAAkB,CAACE,GAAD,CAAlB,GAA0BC,UAA1B;AACAF,MAAAA,gBAAgB,CAACC,GAAD,CAAhB,GAAwBX,yBAAyB,CAACW,GAAD,EAAMC,UAAN,EAAkBC,QAAlB,CAAjD;AACD;;AAED,SAAK,MAAMF,GAAX,IAAkBP,2BAAlB,EAA+C;AAC7C,YAAMQ,UAAU,GAAGL,UAAU,CAACI,GAAD,CAAV,IAAmB,CAAtC;AACA,YAAME,QAAQ,GAAGL,QAAQ,CAACG,GAAD,CAAR,IAAiB,CAAlC;AACAF,MAAAA,kBAAkB,CAACE,GAAD,CAAlB,GAA0BC,UAA1B;AACAF,MAAAA,gBAAgB,CAACC,GAAD,CAAhB,GAAwBX,yBAAyB,CAACW,GAAD,EAAMC,UAAN,EAAkBC,QAAlB,CAAjD;AACD;;AAED,WAAO;AACLC,MAAAA,KAAK,EAAEL,kBADF;AAELM,MAAAA,GAAG,EAAEL;AAFA,KAAP;AAID;;AAEDM,EAAAA,gBAAgB,CAACT,UAAD,EAA4BC,QAA5B,EAAqDS,CAArD,EAAgE;AAC9E,UAAMC,QAAQ,GAAGpB,aAAa,CAACS,UAAD,EAAaC,QAAb,EAAuBS,CAAvB,CAA9B,CAD8E,CAG9E;;AACA,SAAK,MAAMN,GAAX,IAAkBP,2BAAlB,EAA+C;AAC7Cc,MAAAA,QAAQ,CAACP,GAAD,CAAR,GAAgBV,IAAI,CAACM,UAAU,CAACI,GAAD,CAAX,EAAkBH,QAAQ,CAACG,GAAD,CAA1B,EAAiCM,CAAjC,CAApB;AACD;;AAED,WAAOC,QAAP;AACD;;AAvC2E","sourcesContent":["// @flow\nimport assert from '../assert';\nimport TransitionInterpolator from './transition-interpolator';\n\nimport {flyToViewport} from 'viewport-mercator-project';\nimport {isValid, getEndValueByShortestPath} from './transition-utils';\nimport {lerp} from '../math-utils';\n\nimport type {MapStateProps} from '../map-state';\n\nconst VIEWPORT_TRANSITION_PROPS = ['longitude', 'latitude', 'zoom', 'bearing', 'pitch'];\nconst REQUIRED_PROPS = ['latitude', 'longitude', 'zoom', 'width', 'height'];\nconst LINEARLY_INTERPOLATED_PROPS = ['bearing', 'pitch'];\n\n/**\n * This class adapts mapbox-gl-js Map#flyTo animation so it can be used in\n * react/redux architecture.\n * mapbox-gl-js flyTo : https://www.mapbox.com/mapbox-gl-js/api/#map#flyto.\n * It implements “Smooth and efficient zooming and panning.” algorithm by\n * \"Jarke J. van Wijk and Wim A.A. Nuij\"\n*/\nexport default class ViewportFlyToInterpolator extends TransitionInterpolator {\n\n  propNames = VIEWPORT_TRANSITION_PROPS;\n\n  initializeProps(startProps: MapStateProps, endProps: MapStateProps) {\n    const startViewportProps = {};\n    const endViewportProps = {};\n\n    // Check minimum required props\n    for (const key of REQUIRED_PROPS) {\n      const startValue = startProps[key];\n      const endValue = endProps[key];\n      assert(isValid(startValue) && isValid(endValue), `${key} must be supplied for transition`);\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      const startValue = startProps[key] || 0;\n      const endValue = endProps[key] || 0;\n      startViewportProps[key] = startValue;\n      endViewportProps[key] = getEndValueByShortestPath(key, startValue, endValue);\n    }\n\n    return {\n      start: startViewportProps,\n      end: endViewportProps\n    };\n  }\n\n  interpolateProps(startProps: MapStateProps, endProps: MapStateProps, t: number) {\n    const viewport = flyToViewport(startProps, endProps, t);\n\n    // Linearly interpolate 'bearing' and 'pitch' if exist.\n    for (const key of LINEARLY_INTERPOLATED_PROPS) {\n      viewport[key] = lerp(startProps[key], endProps[key], t);\n    }\n\n    return viewport;\n  }\n\n}\n"],"file":"viewport-fly-to-interpolator.js"}