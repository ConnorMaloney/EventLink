import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
// Copyright (c) 2015 Uber Technologies, Inc.
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
import { createElement } from 'react';
import PropTypes from 'prop-types';
import DraggableControl from './draggable-control';
const propTypes = Object.assign({}, DraggableControl.propTypes, {
  // Custom className
  className: PropTypes.string,
  // Longitude of the anchor point
  longitude: PropTypes.number.isRequired,
  // Latitude of the anchor point
  latitude: PropTypes.number.isRequired
});
const defaultProps = Object.assign({}, DraggableControl.defaultProps, {
  className: '',
  offsetLeft: 0,
  offsetTop: 0
});
/*
 * PureComponent doesn't update when context changes.
 * The only way is to implement our own shouldComponentUpdate here. Considering
 * the parent component (StaticMap or InteractiveMap) is pure, and map re-render
 * is almost always triggered by a viewport change, we almost definitely need to
 * recalculate the marker's position when the parent re-renders.
 */

export default class Marker extends DraggableControl {
  _getPosition() {
    const _this$props = this.props,
          longitude = _this$props.longitude,
          latitude = _this$props.latitude,
          offsetLeft = _this$props.offsetLeft,
          offsetTop = _this$props.offsetTop;
    const _this$state = this.state,
          dragPos = _this$state.dragPos,
          dragOffset = _this$state.dragOffset; // If dragging, just return the current drag position

    if (dragPos) {
      return this._getDraggedPosition(dragPos, dragOffset);
    } // Otherwise return the projected lat/lng with offset


    let _this$_context$viewpo = this._context.viewport.project([longitude, latitude]),
        _this$_context$viewpo2 = _slicedToArray(_this$_context$viewpo, 2),
        x = _this$_context$viewpo2[0],
        y = _this$_context$viewpo2[1];

    x += offsetLeft;
    y += offsetTop;
    return [x, y];
  }

  _render() {
    const _this$props2 = this.props,
          className = _this$props2.className,
          draggable = _this$props2.draggable;
    const dragPos = this.state.dragPos;

    const _this$_getPosition = this._getPosition(),
          _this$_getPosition2 = _slicedToArray(_this$_getPosition, 2),
          x = _this$_getPosition2[0],
          y = _this$_getPosition2[1];

    const containerStyle = {
      position: 'absolute',
      left: x,
      top: y,
      cursor: draggable ? dragPos ? 'grabbing' : 'grab' : 'auto'
    };
    return createElement('div', {
      className: `mapboxgl-marker ${className}`,
      ref: this._containerRef,
      style: containerStyle,
      children: this.props.children
    });
  }

}

_defineProperty(Marker, "propTypes", propTypes);

_defineProperty(Marker, "defaultProps", defaultProps);
//# sourceMappingURL=marker.js.map