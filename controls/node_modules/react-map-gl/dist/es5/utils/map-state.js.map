{"version":3,"sources":["../../../src/utils/map-state.js"],"names":["MAPBOX_LIMITS","minZoom","maxZoom","minPitch","maxPitch","DEFAULT_STATE","pitch","bearing","altitude","MapState","width","height","latitude","longitude","zoom","transitionDuration","transitionEasing","transitionInterpolator","transitionInterruption","startPanLngLat","startZoomLngLat","startBearing","startPitch","startZoom","Number","isFinite","_viewportProps","_applyConstraints","_interactiveState","pos","_getUpdatedMapState","_unproject","startPos","_calculateNewLngLat","deltaScaleX","deltaScaleY","_calculateNewPitchAndBearing","scale","_calculateNewZoom","zoomedViewport","WebMercatorViewport","Object","assign","getMapCenterByLngLatPosition","lngLat","newProps","props","viewport","unproject","Math","log2"],"mappings":"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","sourcesContent":["// @flow\nimport WebMercatorViewport, {normalizeViewportProps} from 'viewport-mercator-project';\nimport {TransitionInterpolator} from './transition';\nimport {clamp} from './math-utils';\nimport assert from './assert';\n\n// MAPBOX LIMITS\nexport const MAPBOX_LIMITS = {\n  minZoom: 0,\n  maxZoom: 24,\n  minPitch: 0,\n  maxPitch: 60\n};\n\nconst DEFAULT_STATE = {\n  pitch: 0,\n  bearing: 0,\n  altitude: 1.5\n};\n\ntype ViewportProps = {\n  width: number,\n  height: number,\n  latitude: number,\n  longitude: number,\n  zoom: number,\n  bearing: number,\n  pitch: number,\n  altitude: number,\n  maxZoom: number,\n  minZoom: number,\n  maxPitch: number,\n  minPitch: number,\n  transitionDuration: number,\n  transitionEasing: number => number,\n  transitionInterpolator: TransitionInterpolator,\n  transitionInterruption: number\n};\n\ntype InteractiveState = {\n  startPanLngLat?: Array<number>,\n  startZoomLngLat?: Array<number>,\n  startBearing?: number,\n  startPitch?: number,\n  startZoom?: number\n};\n\nexport type MapStateProps = ViewportProps & InteractiveState & {\n  altitude?: number,\n  maxZoom?: number,\n  minZoom?: number,\n  maxPitch?: number,\n  minPitch?: number,\n};\n\nexport default class MapState {\n\n  constructor({\n    /** Mapbox viewport properties */\n    /** The width of the viewport */\n    width,\n    /** The height of the viewport */\n    height,\n    /** The latitude at the center of the viewport */\n    latitude,\n    /** The longitude at the center of the viewport */\n    longitude,\n    /** The tile zoom level of the map. */\n    zoom,\n    /** The bearing of the viewport in degrees */\n    bearing = DEFAULT_STATE.bearing,\n    /** The pitch of the viewport in degrees */\n    pitch = DEFAULT_STATE.pitch,\n    /**\n     * Specify the altitude of the viewport camera\n     * Unit: map heights, default 1.5\n     * Non-public API, see https://github.com/mapbox/mapbox-gl-js/issues/1137\n     */\n    altitude = DEFAULT_STATE.altitude,\n\n    /** Viewport constraints */\n    maxZoom = MAPBOX_LIMITS.maxZoom,\n    minZoom = MAPBOX_LIMITS.minZoom,\n    maxPitch = MAPBOX_LIMITS.maxPitch,\n    minPitch = MAPBOX_LIMITS.minPitch,\n\n    /** Transition props */\n    transitionDuration,\n    transitionEasing,\n    transitionInterpolator,\n    transitionInterruption,\n\n    /** Interaction states, required to calculate change during transform */\n    /* The point on map being grabbed when the operation first started */\n    startPanLngLat,\n    /* Center of the zoom when the operation first started */\n    startZoomLngLat,\n    /** Bearing when current perspective rotate operation started */\n    startBearing,\n    /** Pitch when current perspective rotate operation started */\n    startPitch,\n    /** Zoom when current zoom operation started */\n    startZoom\n  }: MapStateProps) {\n    assert(Number.isFinite(width), '`width` must be supplied');\n    assert(Number.isFinite(height), '`height` must be supplied');\n    assert(Number.isFinite(longitude), '`longitude` must be supplied');\n    assert(Number.isFinite(latitude), '`latitude` must be supplied');\n    assert(Number.isFinite(zoom), '`zoom` must be supplied');\n\n    this._viewportProps = this._applyConstraints({\n      width,\n      height,\n      latitude,\n      longitude,\n      zoom,\n      bearing,\n      pitch,\n      altitude,\n      maxZoom,\n      minZoom,\n      maxPitch,\n      minPitch,\n      transitionDuration,\n      transitionEasing,\n      transitionInterpolator,\n      transitionInterruption\n    });\n\n    this._interactiveState = {\n      startPanLngLat,\n      startZoomLngLat,\n      startBearing,\n      startPitch,\n      startZoom\n    };\n  }\n\n  _viewportProps: ViewportProps;\n  _interactiveState: InteractiveState;\n\n  /* Public API */\n\n  getViewportProps() {\n    return this._viewportProps;\n  }\n\n  getInteractiveState() {\n    return this._interactiveState;\n  }\n\n  /**\n   * Start panning\n   * @param {[Number, Number]} pos - position on screen where the pointer grabs\n   */\n  panStart({pos} : {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startPanLngLat: this._unproject(pos)\n    });\n  }\n\n  /**\n   * Pan\n   * @param {[Number, Number]} pos - position on screen where the pointer is\n   * @param {[Number, Number], optional} startPos - where the pointer grabbed at\n   *   the start of the operation. Must be supplied of `panStart()` was not called\n   */\n  pan({pos, startPos} : {pos: Array<number>, startPos?: Array<number>}) {\n    const startPanLngLat = this._interactiveState.startPanLngLat || this._unproject(startPos);\n\n    if (!startPanLngLat) {\n      return this;\n    }\n\n    const [longitude, latitude] = this._calculateNewLngLat({startPanLngLat, pos});\n\n    return this._getUpdatedMapState({\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End panning\n   * Must call if `panStart()` was called\n   */\n  panEnd() {\n    return this._getUpdatedMapState({\n      startPanLngLat: null\n    });\n  }\n\n  /**\n   * Start rotating\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  rotateStart({pos} : {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startBearing: this._viewportProps.bearing,\n      startPitch: this._viewportProps.pitch\n    });\n  }\n\n  /**\n   * Rotate\n   * @param {Number} deltaScaleX - a number between [-1, 1] specifying the\n   *   change to bearing.\n   * @param {Number} deltaScaleY - a number between [-1, 1] specifying the\n   *   change to pitch. -1 sets to minPitch and 1 sets to maxPitch.\n   */\n  rotate({deltaScaleX = 0, deltaScaleY = 0} : {deltaScaleX?: number, deltaScaleY?: number}) {\n\n    const {startBearing, startPitch} = this._interactiveState;\n\n    if (!Number.isFinite(startBearing) || !Number.isFinite(startPitch)) {\n      return this;\n    }\n\n    const {pitch, bearing} = this._calculateNewPitchAndBearing({\n      deltaScaleX,\n      deltaScaleY,\n      startBearing: startBearing || 0,\n      startPitch: startPitch || 0\n    });\n\n    return this._getUpdatedMapState({\n      bearing,\n      pitch\n    });\n  }\n\n  /**\n   * End rotating\n   * Must call if `rotateStart()` was called\n   */\n  rotateEnd() {\n    return this._getUpdatedMapState({\n      startBearing: null,\n      startPitch: null\n    });\n  }\n\n  /**\n   * Start zooming\n   * @param {[Number, Number]} pos - position on screen where the center is\n   */\n  zoomStart({pos} : {pos: Array<number>}) {\n    return this._getUpdatedMapState({\n      startZoomLngLat: this._unproject(pos),\n      startZoom: this._viewportProps.zoom\n    });\n  }\n\n  /**\n   * Zoom\n   * @param {[Number, Number]} pos - position on screen where the current center is\n   * @param {[Number, Number]} startPos - the center position at\n   *   the start of the operation. Must be supplied of `zoomStart()` was not called\n   * @param {Number} scale - a number between [0, 1] specifying the accumulated\n   *   relative scale.\n   */\n  zoom({pos, startPos, scale} : {pos: Array<number>, startPos?: Array<number>, scale: number}) {\n    assert(scale > 0, '`scale` must be a positive number');\n\n    // Make sure we zoom around the current mouse position rather than map center\n    let {startZoom, startZoomLngLat} = this._interactiveState;\n\n    if (!Number.isFinite(startZoom)) {\n      // We have two modes of zoom:\n      // scroll zoom that are discrete events (transform from the current zoom level),\n      // and pinch zoom that are continuous events (transform from the zoom level when\n      // pinch started).\n      // If startZoom state is defined, then use the startZoom state;\n      // otherwise assume discrete zooming\n      startZoom = this._viewportProps.zoom;\n      startZoomLngLat = this._unproject(startPos) || this._unproject(pos);\n    }\n\n    // take the start lnglat and put it where the mouse is down.\n    assert(startZoomLngLat, '`startZoomLngLat` prop is required ' +\n      'for zoom behavior to calculate where to position the map.');\n\n    const zoom = this._calculateNewZoom({scale, startZoom: startZoom || 0});\n\n    const zoomedViewport = new WebMercatorViewport(\n      Object.assign({}, this._viewportProps, {zoom})\n    );\n    // $FlowFixMe\n    const [longitude, latitude] = zoomedViewport.getMapCenterByLngLatPosition({\n      lngLat: startZoomLngLat,\n      pos\n    });\n\n    return this._getUpdatedMapState({\n      zoom,\n      longitude,\n      latitude\n    });\n  }\n\n  /**\n   * End zooming\n   * Must call if `zoomStart()` was called\n   */\n  zoomEnd() {\n    return this._getUpdatedMapState({\n      startZoomLngLat: null,\n      startZoom: null\n    });\n  }\n\n  /* Private methods */\n\n  _getUpdatedMapState(newProps: any): MapState {\n    // Update _viewportProps\n    return new MapState(Object.assign({}, this._viewportProps, this._interactiveState, newProps));\n  }\n\n  // Apply any constraints (mathematical or defined by _viewportProps) to map state\n  _applyConstraints(props: ViewportProps): ViewportProps {\n    // Ensure zoom is within specified range\n    const {maxZoom, minZoom, zoom} = props;\n    props.zoom = clamp(zoom, minZoom, maxZoom);\n\n    // Ensure pitch is within specified range\n    const {maxPitch, minPitch, pitch} = props;\n    props.pitch = clamp(pitch, minPitch, maxPitch);\n\n    Object.assign(props, normalizeViewportProps(props));\n\n    return props;\n  }\n\n  _unproject(pos: ?Array<number>): ?Array<number> {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return pos && viewport.unproject(pos);\n  }\n\n  // Calculate a new lnglat based on pixel dragging position\n  _calculateNewLngLat({startPanLngLat, pos}: {\n    startPanLngLat: Array<number>,\n    pos: Array<number>\n  }): Array<number> {\n    const viewport = new WebMercatorViewport(this._viewportProps);\n    return viewport.getMapCenterByLngLatPosition({lngLat: startPanLngLat, pos});\n  }\n\n  // Calculates new zoom\n  _calculateNewZoom({scale, startZoom}: {scale: number, startZoom: number}): number {\n    const {maxZoom, minZoom} = this._viewportProps;\n    const zoom = startZoom + Math.log2(scale);\n    return clamp(zoom, minZoom, maxZoom);\n  }\n\n  // Calculates a new pitch and bearing from a position (coming from an event)\n  _calculateNewPitchAndBearing({deltaScaleX, deltaScaleY, startBearing, startPitch} : {\n    deltaScaleX: number,\n    deltaScaleY: number,\n    startBearing: number,\n    startPitch: number\n  }) {\n    // clamp deltaScaleY to [-1, 1] so that rotation is constrained between minPitch and maxPitch.\n    // deltaScaleX does not need to be clamped as bearing does not have constraints.\n    deltaScaleY = clamp(deltaScaleY, -1, 1);\n\n    const {minPitch, maxPitch} = this._viewportProps;\n\n    const bearing = startBearing + 180 * deltaScaleX;\n    let pitch = startPitch;\n    if (deltaScaleY > 0) {\n      // Gradually increase pitch\n      pitch = startPitch + deltaScaleY * (maxPitch - startPitch);\n    } else if (deltaScaleY < 0) {\n      // Gradually decrease pitch\n      pitch = startPitch - deltaScaleY * (minPitch - startPitch);\n    }\n\n    return {\n      pitch,\n      bearing\n    };\n  }\n\n}\n"],"file":"map-state.js"}